pid.accro.default.p=100.00
pid.accro.default.i=150.00
pid.accro.default.d=-350.00
pid.accro.default.stickScaling=1.00

pid.attitude.accel.default.p=3.00
pid.attitude.accel.default.i=0.00
pid.attitude.accel.default.d=0.00
pid.attitude.gyro.default.p=100.00
pid.attitude.gyro.default.i=150.00
pid.attitude.gyro.default.d=-350.00



#  PID[RATE_XAXIS_PID_IDX].P = 100.0;
#  PID[RATE_XAXIS_PID_IDX].I = 150.0;
#  PID[RATE_XAXIS_PID_IDX].D = -350.0;
#  PID[RATE_YAXIS_PID_IDX].P = 100.0;
#  PID[RATE_YAXIS_PID_IDX].I = 150.0;
#  PID[RATE_YAXIS_PID_IDX].D = -350.0;
#  PID[ATTITUDE_XAXIS_PID_IDX].P = 3.5;
#  PID[ATTITUDE_XAXIS_PID_IDX].I = 0.0;
#  PID[ATTITUDE_XAXIS_PID_IDX].D = 0.0;
#  PID[ATTITUDE_YAXIS_PID_IDX].P = 3.5;
#  PID[ATTITUDE_YAXIS_PID_IDX].I = 0.0;
#  PID[ATTITUDE_YAXIS_PID_IDX].D = 0.0;
#  PID[ZAXIS_PID_IDX].P = 200.0;
#  PID[ZAXIS_PID_IDX].I = 5.0;
#  PID[ZAXIS_PID_IDX].D = 0.0;
#  PID[HEADING_HOLD_PID_IDX].P = 3.0;
#  PID[HEADING_HOLD_PID_IDX].I = 0.1;
#  PID[HEADING_HOLD_PID_IDX].D = 0.0;
#  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].P = 100.0;
#  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].I = 0.0;
#  PID[ATTITUDE_GYRO_XAXIS_PID_IDX].D = -350.0;
#  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].P = 100.0;
#  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].I = 0.0;
#  PID[ATTITUDE_GYRO_YAXIS_PID_IDX].D = -350.0;
#  rotationSpeedFactor = 1.0;
  
#  accelScaleFactor[XAXIS] = 1.0;
#  runTimeAccelBias[XAXIS] = 0;
#  accelScaleFactor[YAXIS] = 1.0;
#  runTimeAccelBias[YAXIS] = 0;
#  accelScaleFactor[ZAXIS] = 1.0;
#  runTimeAccelBias[ZAXIS] = 0;
#  storeSensorsZeroToEEPROM();

  #if defined (AltitudeHoldBaro)
#    PID[BARO_ALTITUDE_HOLD_PID_IDX].P = 25.0;
#    PID[BARO_ALTITUDE_HOLD_PID_IDX].I = 0.6;
#    PID[BARO_ALTITUDE_HOLD_PID_IDX].D = 0.0;
#    PID[ZDAMPENING_PID_IDX].P = 0.0;
#    PID[ZDAMPENING_PID_IDX].I = 0.0;
#    PID[ZDAMPENING_PID_IDX].D = 0.0;
  #endif
  #if defined (AltitudeHoldRangeFinder)
#    PID[SONAR_ALTITUDE_HOLD_PID_IDX].P = 50.0;
#    PID[SONAR_ALTITUDE_HOLD_PID_IDX].I = 0.6;
#    PID[SONAR_ALTITUDE_HOLD_PID_IDX].D = 0.0;
  #endif

  
  #if defined AltitudeHoldBaro || defined AltitudeHoldRangeFinder
 #   minThrottleAdjust = -50.0;
 #   maxThrottleAdjust = 50.0; //we don't want it to be able to take over totally
    #if defined AltitudeHoldBaro
 #     baroSmoothFactor = 0.1;
    #endif
#    altitudeHoldBump = 90;
#    altitudeHoldPanicStickMovement = 250;
  #endif
  

#  receiverXmitFactor = 1.0;
#  minArmedThrottle = 1150;
  // AKA - old setOneG not in SI - accel->setOneG(500);
#  accelOneG = -9.80665; // AKA set one G to 9.8 m/s^2
#  for (byte channel = XAXIS; channel < LASTCHANNEL; channel++) {
#    receiverSlope[channel] = 1.0;
#    receiverOffset[channel] = 0.0;
#    receiverSmoothFactor[channel] = 1.0;
#  }
#  receiverSmoothFactor[ZAXIS] = 0.5;

#  flightMode = RATE_FLIGHT_MODE;
#  headingHoldConfig = ON;
#  aref = 5.0; // Use 3.0 if using a v1.7 shield or use 2.8 for an AeroQuad Shield < v1.7
  
  #ifdef BattMonitor
#    batteryMonitorAlarmVoltage = 3.33;
#    batteryMonitorThrottleTarget = 1450;
#    batteryMonitorGoingDownTime = 60000;
  #endif

  #if defined (AltitudeHoldRangeFinder)
#    maxRangeFinderRange = 4.5;
#    minRangeFinderRange = 0.0;
  #endif
  
  #if defined (UseGPSNavigator)
#    missionNbPoint = 0;
#    PID[GPSROLL_PID_IDX].P = 0.8;
#    PID[GPSROLL_PID_IDX].I = 0.0;
#    PID[GPSROLL_PID_IDX].D = 0.0;
#    PID[GPSPITCH_PID_IDX].P = 0.8;
##    PID[GPSPITCH_PID_IDX].I = 0.0;
#    PID[GPSPITCH_PID_IDX].D = 0.0;
#    PID[GPSYAW_PID_IDX].P = 50.0;
#    PID[GPSYAW_PID_IDX].I = 0.0;
#    PID[GPSYAW_PID_IDX].D = 0.0;

 #endif

  // Camera Control
  #ifdef CameraControl
#    cameraMode = 1;
#    mCameraPitch = 1273.2;    
#    mCameraRoll = 636.6;    
#    mCameraYaw = 318.3;
#    servoCenterPitch = 1500;
#    servoCenterRoll = 1500;
#    servoCenterYaw = 1500;
##    servoMinPitch = 1000;
#    servoMinRoll = 1000;
##    servoMinYaw = 1000;
#    servoMaxPitch = 2000;
#    servoMaxRoll = 2000;
#    servoMaxYaw = 2000;
    #ifdef CameraTXControl
#      servoTXChannels = 1;
    #endif
  #endif